"use strict";(self.webpackChunk_winner_fed_cloud_utils=self.webpackChunk_winner_fed_cloud_utils||[]).push([["6420"],{2937:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var s=r(2676),t=r(453);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",code:"code",h4:"h4",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",pre:"pre"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"function-objecttopairs",children:["Function: objectToPairs",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#function-objecttopairs",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"objectToPairs"}),"<",(0,s.jsx)(n.code,{children:"T"}),">(",(0,s.jsx)(n.code,{children:"obj"}),"): [",(0,s.jsx)(n.code,{children:"string"}),", ",(0,s.jsx)(n.code,{children:"T"}),"][]"]}),"\n",(0,s.jsx)(n.p,{children:"对象转化为键值对\n使用 Object.keys() 和 Array.map() 遍历对象的键并生成一个包含键值对的数组。"}),"\n",(0,s.jsxs)(n.h4,{id:"type-parameters",children:["Type parameters",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#type-parameters",children:"#"})]}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{align:"left",children:"Name"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"T"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"parameters",children:["Parameters",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parameters",children:"#"})]}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{align:"left",children:"Name"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Type"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Description"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"obj"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"Object"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"需要转换的对象"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"returns",children:["Returns",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#returns",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["[",(0,s.jsx)(n.code,{children:"string"}),", ",(0,s.jsx)(n.code,{children:"T"}),"][]"]}),"\n",(0,s.jsx)(n.p,{children:"包含键值对的数组"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Example"})})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"objectToPairs({ a: 1, b: 2 });\n// => [['a',1],['b',2]]\n"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let c=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["api%2Ffunctions%2FobjectToPairs.md"]={toc:[{text:"Type parameters",id:"type-parameters",depth:4},{text:"Parameters",id:"parameters",depth:4},{text:"Returns",id:"returns",depth:4}],title:"Function: objectToPairs",headingTitle:"Function: objectToPairs",frontmatter:{}}}}]);